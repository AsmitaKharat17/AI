% facts
on(a, table).
on(b, table).
on(c, table).
clear(a).
clear(b).
clear(c).

% rules
move(X, Y) :-
    clear(Y),
    on(X, Z),
    clear(X),
    X \= Y,
    Y \= table,
    Z \= Y,
    retract(on(X, Z)),
    assert(on(X, Y)),
    retract(clear(Y)),
    assert(clear(X)),
    assert(clear(Z)),
    write(X), write(' moved to '), write(Y), nl.

% queries
move(a, b).
move(a, c).
move(b, c).

----------------------------------------------------------------------
% facts
hasSpareTire.
hasFlatTire.

% rules
needsToChangeTire :- hasFlatTire.

startChangingTire :-
    needsToChangeTire,
    write('Changing tire...'), nl,
    removeFlatTire,
    installSpareTire,
    tightenLugNuts.

removeFlatTire :-
    write('Removing flat tire...'), nl.

installSpareTire :-
    hasSpareTire,
    write('Installing spare tire...'), nl.

tightenLugNuts :-
    write('Tightening lug nuts...'), nl.
---------------------------------------------------------------------
socks([red, green, blue, yellow, purple, orange]).
shoes([sneakers, boots, flipflops, loafers, sandals, clogs]).

match(Sock, Shoe) :-
    socks(Socks),
    shoes(Shoes),
    member(Sock, Socks),
    member(Shoe, Shoes),
    SockColor = Shoesock,
    write('Matching sock: '), write(Sock), nl,
    write('Matching shoe: '), write(Shoe), nl.

--------------------------------------------------------------------
% Addition
add(X, Y, Result) :-
    Result is X + Y.

% Subtraction
subtract(X, Y, Result) :-
    Result is X - Y.

% Multiplication
multiply(X, Y, Result) :-
    Result is X * Y.

% Division
divide(X, Y, Result) :-
    Y =\= 0,  % Check for division by zero
    Result is X / Y.

-------------------------------------------------------------------------
fact(0,1).
fact(N,F):-
(

 % The below is for +ve factorial.
 N>0 ->
 (
  N1 is N-1,
  fact(N1,F1),
  F is N*F1
 )
 ;

 % The below is for -ve factorial.
 N<0 ->
 (
  N1 is N+1,
  fact(N1,F1),
  F is N*F1
 )
).
-----------------------------------------------------------------------------------
fib(0, 0).
fib(1, 1).
fib(N, Result) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    fib(N1, Result1),
    fib(N2, Result2),
    Result is Result1 + Result2.

fibonacci_series(0, []).
fibonacci_series(N, [Result|Series]) :-
    N >= 0,
    fib(N, Result),
    N1 is N - 1,
    fibonacci_series(N1, Series).
--------------------------------------------------------------------------------------
gcd(X, Y, G) :- X = Y, G = X.
gcd(X, Y, G) :-
X < Y,
Y1 is Y - X,
gcd(X, Y1, G).
gcd(X, Y, G) :- X > Y, gcd(Y, X, G).
lcm(X,Y,LCM):- gcd(X,Y,GCD), LCM is X*Y//GCD.
-----------------------------------------------------------------------------------

male(jay).
male(bipin).
male(ukabhai).
female(rupal).
female(savitaben).
female(janavi).

parent(ukabhai,bipin).
parent(savitaben,bipin).
parent(bipin,jay).
parent(rupal,jay).
parent(bipin,janavi).
parent(rupal,janavi).

%mother(savitaben,bipin):- parent(savitaben,bipin), female(savitaben).
%mother(rupal,jay):- parent(rupal,jay), female(rupal).
%mother(rupal,janavi):- parent(rupal,janavi), female(rupal).
%father(ukabhai,bipin):- parent(ukabhai,bipin), male(ukabhai).
%father(bipin,jay):-parent(bipin,jay),male(bipin).
%father(bipin,janavi):-parent(bipin,janavi),male(bipin).

% grandfather(ukabhai,jay):-parent(ukabhai,bipin),parent(bipin,jay),male(ukabhai).
%
% grandfather(ukabhai,janavi):-parent(ukabhai,bipin),parent(bipin,janavi),male(ukabhai).
%
% grandmother(savitaben,jay):-parent(savitaben,bipin),parent(bipin,jay),female(savitaben).
%
% grandmother(savitaben,janavi):-parent(savitaben,bipin),parent(bipin,janavi),female(savitaben).
%

mother(A,B):- parent(A,B), female(A).
father(A,B):- parent(A,B), male(A).
grandfather(A,C):-parent(A,B),parent(B,C),male(A).
grandmother(A,C):-parent(A,B),parent(B,C),female(A).
siblings(A,B):-father(C,A),father(C,B),mother(D,A),mother(D,B).
